// Generated by gencpp from file tinycan/CanMsg.msg
// DO NOT EDIT!


#ifndef TINYCAN_MESSAGE_CANMSG_H
#define TINYCAN_MESSAGE_CANMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tinycan
{
template <class ContainerAllocator>
struct CanMsg_
{
  typedef CanMsg_<ContainerAllocator> Type;

  CanMsg_()
    : id(0)
    , len(0)
    , data()  {
      data.assign(0);
  }
  CanMsg_(const ContainerAllocator& _alloc)
    : id(0)
    , len(0)
    , data()  {
      data.assign(0);
  }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _len_type;
  _len_type len;

   typedef boost::array<uint8_t, 8>  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::tinycan::CanMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tinycan::CanMsg_<ContainerAllocator> const> ConstPtr;

}; // struct CanMsg_

typedef ::tinycan::CanMsg_<std::allocator<void> > CanMsg;

typedef boost::shared_ptr< ::tinycan::CanMsg > CanMsgPtr;
typedef boost::shared_ptr< ::tinycan::CanMsg const> CanMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tinycan::CanMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tinycan::CanMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tinycan

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'tinycan': ['/home/vmuser/catkin_ws/src/tinycan/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tinycan::CanMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tinycan::CanMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tinycan::CanMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tinycan::CanMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tinycan::CanMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tinycan::CanMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tinycan::CanMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f00f39a5c6b7dafc7c5418c2221de64c";
  }

  static const char* value(const ::tinycan::CanMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf00f39a5c6b7dafcULL;
  static const uint64_t static_value2 = 0x7c5418c2221de64cULL;
};

template<class ContainerAllocator>
struct DataType< ::tinycan::CanMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tinycan/CanMsg";
  }

  static const char* value(const ::tinycan::CanMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tinycan::CanMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n\
int32 len\n\
uint8[8] data\n\
";
  }

  static const char* value(const ::tinycan::CanMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tinycan::CanMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.len);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct CanMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tinycan::CanMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tinycan::CanMsg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "len: ";
    Printer<int32_t>::stream(s, indent + "  ", v.len);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TINYCAN_MESSAGE_CANMSG_H
